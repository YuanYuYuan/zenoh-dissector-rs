warning: unused import: `SourceSn`
  --> /home/circle/Workings/ZettaScale/src/zenoh-new-protocol/zenoh/src/sample.rs:25:39
   |
25 | use zenoh_protocol::zenoh::{DataInfo, SourceSn};
   |                                       ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `zenoh` (lib) generated 1 warning (run `cargo fix --lib -p zenoh` to apply 1 suggestion)
    Finished dev [unoptimized + debuginfo] target(s) in 0.15s
[src/lib.rs:194] &msg = TransportMessage {
    body: InitSyn(
        InitSyn {
            version: 8,
            whatami: Client,
            zid: f67a4896638ba8a99ef1b9b493d33f35,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitAck(
        InitAck {
            version: 8,
            whatami: Peer,
            zid: c670286e706e38cad715b625648d5247,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenSyn(
        OpenSyn {
            lease: 10s,
            initial_sn: 106702511,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenAck(
        OpenAck {
            lease: 10s,
            initial_sn: 191270250,
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 191270250,
            payload: [
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareKeyExpr(
                                DeclareKeyExpr {
                                    id: 1,
                                    wire_expr: demo/example,
                                },
                            ),
                        },
                    ),
                },
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareSubscriber(
                                DeclareSubscriber {
                                    id: 0,
                                    wire_expr: 1:Sender:/**,
                                    ext_info: SubscriberInfo {
                                        reliability: Reliable,
                                        mode: Push,
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 106702511,
            payload: [
                NetworkMessage {
                    body: Push(
                        Push {
                            wire_expr: demo/example/zenoh-rs-put,
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            payload: Put(
                                Put {
                                    timestamp: None,
                                    encoding: Exact(
                                        TextPlain,
                                    ),
                                    ext_sinfo: None,
                                    ext_unknown: [],
                                    payload: ZBuf {
                                        slices: [[50, 75, 74, 20, 66, 72, 6f, 6d, 20, 52, 75, 73, 74, 21]],
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Close(
        Close {
            reason: 0,
            session: false,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitSyn(
        InitSyn {
            version: 8,
            whatami: Client,
            zid: f67a4896638ba8a99ef1b9b493d33f35,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitAck(
        InitAck {
            version: 8,
            whatami: Peer,
            zid: c670286e706e38cad715b625648d5247,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenSyn(
        OpenSyn {
            lease: 10s,
            initial_sn: 106702511,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenAck(
        OpenAck {
            lease: 10s,
            initial_sn: 191270250,
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 191270250,
            payload: [
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareKeyExpr(
                                DeclareKeyExpr {
                                    id: 1,
                                    wire_expr: demo/example,
                                },
                            ),
                        },
                    ),
                },
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareSubscriber(
                                DeclareSubscriber {
                                    id: 0,
                                    wire_expr: 1:Sender:/**,
                                    ext_info: SubscriberInfo {
                                        reliability: Reliable,
                                        mode: Push,
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 106702511,
            payload: [
                NetworkMessage {
                    body: Push(
                        Push {
                            wire_expr: demo/example/zenoh-rs-put,
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            payload: Put(
                                Put {
                                    timestamp: None,
                                    encoding: Exact(
                                        TextPlain,
                                    ),
                                    ext_sinfo: None,
                                    ext_unknown: [],
                                    payload: ZBuf {
                                        slices: [[50, 75, 74, 20, 66, 72, 6f, 6d, 20, 52, 75, 73, 74, 21]],
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Close(
        Close {
            reason: 0,
            session: false,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitSyn(
        InitSyn {
            version: 8,
            whatami: Client,
            zid: f67a4896638ba8a99ef1b9b493d33f35,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitAck(
        InitAck {
            version: 8,
            whatami: Peer,
            zid: c670286e706e38cad715b625648d5247,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenSyn(
        OpenSyn {
            lease: 10s,
            initial_sn: 106702511,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenAck(
        OpenAck {
            lease: 10s,
            initial_sn: 191270250,
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 191270250,
            payload: [
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareKeyExpr(
                                DeclareKeyExpr {
                                    id: 1,
                                    wire_expr: demo/example,
                                },
                            ),
                        },
                    ),
                },
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareSubscriber(
                                DeclareSubscriber {
                                    id: 0,
                                    wire_expr: 1:Sender:/**,
                                    ext_info: SubscriberInfo {
                                        reliability: Reliable,
                                        mode: Push,
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 106702511,
            payload: [
                NetworkMessage {
                    body: Push(
                        Push {
                            wire_expr: demo/example/zenoh-rs-put,
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            payload: Put(
                                Put {
                                    timestamp: None,
                                    encoding: Exact(
                                        TextPlain,
                                    ),
                                    ext_sinfo: None,
                                    ext_unknown: [],
                                    payload: ZBuf {
                                        slices: [[50, 75, 74, 20, 66, 72, 6f, 6d, 20, 52, 75, 73, 74, 21]],
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Close(
        Close {
            reason: 0,
            session: false,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitSyn(
        InitSyn {
            version: 8,
            whatami: Client,
            zid: f67a4896638ba8a99ef1b9b493d33f35,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: InitAck(
        InitAck {
            version: 8,
            whatami: Peer,
            zid: c670286e706e38cad715b625648d5247,
            resolution: Resolution(
                10,
            ),
            batch_size: 65535,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: Some(
                ZExtUnit {
                    Id: 1,
                    Mandatory: false,
                    Encoding: "Unit",
                },
            ),
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenSyn(
        OpenSyn {
            lease: 10s,
            initial_sn: 106702511,
            cookie: [30, 73, 3e, 5c, e3, 78, a4, a3, 48, df, 9c, ba, e3, 2f, 79, a0, 5d, 05, 7b, 76, ef, 1d, be, 71, b8, ca, 81, 06, e5, d4, 84, 5c, 2d, 8d, 1f, 6c, 5d, 4f, 90, a0, 68, 6d, 58, 3c, a6, 40, 3a, 47, 46],
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: OpenAck(
        OpenAck {
            lease: 10s,
            initial_sn: 191270250,
            ext_qos: None,
            ext_shm: None,
            ext_auth: None,
            ext_mlink: None,
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 191270250,
            payload: [
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareKeyExpr(
                                DeclareKeyExpr {
                                    id: 1,
                                    wire_expr: demo/example,
                                },
                            ),
                        },
                    ),
                },
                NetworkMessage {
                    body: Declare(
                        Declare {
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            body: DeclareSubscriber(
                                DeclareSubscriber {
                                    id: 0,
                                    wire_expr: 1:Sender:/**,
                                    ext_info: SubscriberInfo {
                                        reliability: Reliable,
                                        mode: Push,
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Frame(
        Frame {
            reliability: Reliable,
            sn: 106702511,
            payload: [
                NetworkMessage {
                    body: Push(
                        Push {
                            wire_expr: demo/example/zenoh-rs-put,
                            ext_qos: QoS {
                                priority: Data,
                                congestion: Drop,
                                express: false,
                            },
                            ext_tstamp: None,
                            ext_nodeid: NodeIdType {
                                node_id: 0,
                            },
                            payload: Put(
                                Put {
                                    timestamp: None,
                                    encoding: Exact(
                                        TextPlain,
                                    ),
                                    ext_sinfo: None,
                                    ext_unknown: [],
                                    payload: ZBuf {
                                        slices: [[50, 75, 74, 20, 66, 72, 6f, 6d, 20, 52, 75, 73, 74, 21]],
                                    },
                                },
                            ),
                        },
                    ),
                },
            ],
            ext_qos: QoSType {
                inner: 5,
            },
        },
    ),
}
[src/lib.rs:194] &msg = TransportMessage {
    body: Close(
        Close {
            reason: 0,
            session: false,
        },
    ),
}
